
ChatGPT:
✅ VWAP tabanlı ap_botu + RSI/MACD trend analizlerini tek yapıda birleştirilmiş final sürümü veriyorum.
Bu yapı bağımsız çalışır, ayrıca ileride MegaBot’a kolayca entegre edilir.
Klasör Yapısı (Tam Son Hal)
bash
Kopyala
Düzenle
ap_botu/
├── main.py
├── keep_alive.py
├── ap_main.py
├── ap_utils.py
├── ap_jobs.py
├── requirements.txt
├── ap_favorites.json   # ilk çalıştırmada otomatik oluşur
├── ap_alerts.json      # /setalert komutuyla oluşur
└── ap_history.csv      # günlük kayıt sonrası oluşur



✅✅
✅📦 ap_botu (VWAP + RSI/MACD) Final Sürüm
📂 main.py

from keep_alive import keep_alive
import os
from ap_main import setup_bot, start_bot

def main():
    keep_alive()
    updater = setup_bot()
    start_bot(updater)

if __name__ == "__main__":
    os.environ["TELEGRAM_TOKEN"] = "BURAYA_TELEGRAM_BOT_TOKENIN"  # Bot tokenini gir
    main()


✅✅
✅📂 keep_alive.py

import threading
from http.server import SimpleHTTPRequestHandler, HTTPServer

PORT = 8080

def run_server():
    server_address = ("0.0.0.0", PORT)
    httpd = HTTPServer(server_address, SimpleHTTPRequestHandler)
    httpd.serve_forever()

def keep_alive():
    thread = threading.Thread(target=run_server)
    thread.daemon = True
    thread.start()
    print(f"✅ Keep-Alive aktif: Port {PORT}")
📂 ap_main.py
python
Kopyala
Düzenle
import os
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext
from ap_utils import (
    ap_command, p_command, rsi_macd_command,
    add_favorite, delete_favorite, set_alert_threshold
)
from ap_jobs import schedule_daily_jobs

def setup_bot():
    token = os.getenv("TELEGRAM_TOKEN")
    updater = Updater(token, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("ap", ap))
    dp.add_handler(CommandHandler("p", p_price))
    dp.add_handler(CommandHandler("trend", trend))  # RSI/MACD yeni komutu
    dp.add_handler(CommandHandler("add", add_fav))
    dp.add_handler(CommandHandler("delete", del_fav))
    dp.add_handler(CommandHandler("setalert", set_alert))

    schedule_daily_jobs(updater.job_queue)
    return updater

def start_bot(updater):
    updater.start_polling()
    updater.idle()

# -------- Komutlar --------

def ap(update: Update, context: CallbackContext):
    arg1 = context.args[0] if context.args else "24h"
    days = int(arg1.replace("d", "")) if arg1.isdigit() else None
    update.message.reply_text(ap_command(arg1, days))

def p_price(update: Update, context: CallbackContext):
    coins = context.args
    if not coins:
        update.message.reply_text("Kullanım: /p btc eth ...")
        return
    update.message.reply_text(p_command(coins))

def trend(update: Update, context: CallbackContext):
    coins = context.args if context.args else ["btc", "eth"]
    update.message.reply_text(rsi_macd_command(coins))

def add_fav(update: Update, context: CallbackContext):
    if len(context.args) < 2:
        update.message.reply_text("Kullanım: /add F1 /p btc eth ...")
        return
    fav = context.args[0]
    coins = context.args[1:]
    update.message.reply_text(add_favorite(fav, coins))

def del_fav(update: Update, context: CallbackContext):
    if not context.args:
        update.message.reply_text("Kullanım: /delete F1")
        return
    fav = context.args[0]
    update.message.reply_text(delete_favorite(fav))

def set_alert(update: Update, context: CallbackContext):
    if len(context.args) < 2:
        update.message.reply_text("Kullanım: /setalert 20 10")
        return
    update.message.reply_text(set_alert_threshold(context.args[0], context.args[1]))



✅✅
✅📂 ap_utils.py (VWAP + RSI/MACD birlikte)
📌 RSI/MACD fonksiyonları en alta eklendi.

[Mesaj çok uzun olacağı için istersen şimdi sadece ap_utils.py dosyasını ayrı mesajda tam vereyim mi?**
Onaylıyor musun?**]

ChatGPT:
✅ Tamamdır, şimdi VWAP + RSI/MACD birleşik algoritmalı ap_utils.py dosyasını tam haliyle veriyorum.
Bu haliyle hem eski VWAP tabanlı /ap komutu hem de yeni /trend komutu aynı botta çalışır.


✅✅
✅📂 ap_utils.py (Final)
python
Kopyala
Düzenle
import requests, json, csv, os
from datetime import datetime
import numpy as np
import pandas as pd

FAV_FILE = "ap_favorites.json"
HISTORY_FILE = "ap_history.csv"
ALERT_FILE = "ap_alerts.json"

# -------- Public API --------
def get_24h_tickers():
    url = "https://api.binance.com/api/v3/ticker/24hr"
    return requests.get(url).json()

# ====================================================
# ✅ VWAP Tabanlı Skor Hesaplama ( /ap için )
# ====================================================
def calculate_scores():
    data = get_24h_tickers()
    alt_vwap_sum, alt_vol_sum = 0, 0
    alt_vs_btc_sum, alt_vs_btc_vol = 0, 0
    long_term_volumes = []
    btc_vwap = 0

    for coin in data:
        sym = coin['symbol']
        if not sym.endswith("USDT") or sym in ["BUSDUSDT","USDCUSDT","FDUSDUSDT"]:
            continue

        price_change = float(coin['priceChangePercent'])
        volume = float(coin['quoteVolume'])

        if sym == "BTCUSDT":
            btc_vwap = price_change
            continue

        alt_vwap_sum += price_change * volume
        alt_vol_sum += volume

        if price_change > btc_vwap:
            alt_vs_btc_sum += (price_change - btc_vwap) * volume
            alt_vs_btc_vol += volume

        long_term_volumes.append(volume)

    alt_vwap = alt_vwap_sum / alt_vol_sum if alt_vol_sum else 0
    alt_vs_btc_vwap = alt_vs_btc_sum / alt_vs_btc_vol if alt_vs_btc_vol else 0
    long_term_score = sum(long_term_volumes) / len(long_term_volumes) / 1_000_000 if long_term_volumes else 0

    alt_vs_btc_score = round(min(100, max(0, alt_vs_btc_vwap + 50)), 1)
    alt_total_score = round(min(100, max(0, alt_vwap + 50)), 1)
    long_term_score = round(min(100, max(0, long_term_score)), 1)

    return alt_vs_btc_score, alt_total_score, long_term_score

# ====================================================
# ✅ Günlük Kayıt ve Trend ( /ap için )
# ====================================================
def save_daily_history():
    vsbtc, alt, longt = calculate_scores()
    date = datetime.now().strftime("%Y-%m-%d")
    rows = []
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r") as f:
            rows = list(csv.reader(f))
    rows.append([date, vsbtc, alt, longt])
    if len(rows) > 60:
        rows = rows[-60:]
    with open(HISTORY_FILE, "w", newline="") as f:
        csv.writer(f).writerows(rows)
    return vsbtc, alt, longt

def compare_with_history(days=1):
    if not os.path.exists(HISTORY_FILE):
        return calculate_scores(), [0,0,0], ["➡️","➡️","➡️"]
    with open(HISTORY_FILE, "r") as f:
        rows = list(csv.reader(f))
    if len(rows) < days:
        return calculate_scores(), [0,0,0], ["➡️","➡️","➡️"]

    now = calculate_scores()
    if days == 1:
        base = [float(rows[-1][1]), float(rows[-1][2]), float(rows[-1][3])]
    else:
        base = [sum(float(r[i]) for r in rows[-days:]) / days for i in range(1, 4)]

    diff = [round(((n - b) / b) * 100, 1) if b else 0 for n, b in zip(now, base)]
    arrows = ["🔺" if d > 0 else "🔻" if d < 0 else "➡️" for d in diff]
    return now, diff, arrows

def ap_command(period="24h", days=None):
    now, diff, arr = compare_with_history(days if days else 1)
    return (f"Ap({period}) raporu\n"
            f"Altların Kısa Vadede Btc'ye Karşı Gücü(0-100): {now[0]} {arr[0]}%{abs(diff[0])}\n"
            f"Altların Kısa Vadede Gücü(0-100): {now[1]} {arr[1]}%{abs(diff[1])}\n"
            f"Coinlerin Uzun Vadede Gücü(0-100): {now[2]} {arr[2]}%{abs(diff[2])}")

# ====================================================
# ✅ P Komutu (Fiyat, % değişim, hacim)
# ====================================================
def p_command(coins):
    data = get_24h_tickers()
    lookup = {d['symbol']: d for d in data}
    msg = ""
    for c in coins:
        s = (c.upper() + "USDT")
        if s not in lookup:
            msg += f"{c.upper()}: bulunamadı\n"
            continue
        d = lookup[s]
        price = float(d['lastPrice'])
        change = float(d['priceChangePercent'])
        vol = float(d['quoteVolume']) / 1_000_000
        pf = f"{price:.2f}" if price >= 1 else f"{price:.8f}"
        arrow = "🔺" if change > 0 else "🔻" if change < 0 else "➡️"
        msg += f"{c.upper()}: {pf} {arrow}{change}% (Vol: {vol:.1f}M$)\n"
    return msg

# ====================================================
# ✅ Favoriler
# ====================================================
def load_favorites():
    if os.path.exists(FAV_FILE):
        with open(FAV_FILE, "r") as f:
            return json.load(f)
    return {}

def save_favorites(data):
    with open(FAV_FILE, "w") as f:
        json.dump(data, f)

def add_favorite(fav, coins):
    favs = load_favorites()
    favs[fav] = coins
    save_favorites(favs)
    return f"{fav} güncellendi: {' '.join(coins)}"

def delete_favorite(fav):
    favs = load_favorites()
    if fav in favs:
        del favs[fav]
        save_favorites(favs)
        return f"{fav} silindi"
    return "Favori bulunamadı"

# ====================================================
# ✅ Alert
# ====================================================
def set_alert_threshold(level1, level2):
    alert = {"level1": float(level1), "level2": float(level2)}
    with open(ALERT_FILE, "w") as f:
        json.dump(alert, f)
    return f"Alertler güncellendi: {level1}, {level2}"

# ====================================================
# ✅ RSI + MACD Trend Analizi ( /trend için )
# ====================================================
BINANCE_KLINES = "https://api.binance.com/api/v3/klines"

def get_klines(symbol="BTCUSDT", interval="1h", limit=100):
    url = f"{BINANCE_KLINES}?symbol={symbol}&interval={interval}&limit={limit}"
    data = requests.get(url).json()
    return [float(x[4]) for x in data]

def calculate_rsi(prices, period=14):
    deltas = np.diff(prices)
    gains = np.where(deltas > 0, deltas, 0)
    losses = np.where(deltas < 0, -deltas, 0)
    avg_gain = np.convolve(gains, np.ones(period), 'valid') / period
    avg_loss = np.convolve(losses, np.ones(period), 'valid') / period
    rs = np.divide(avg_gain, avg_loss, out=np.zeros_like(avg_gain), where=avg_loss != 0)
    rsi = 100 - (100 / (1 + rs))
    return rsi[-1] if len(rsi) else 0

def calculate_macd(prices, short=12, long=26, signal=9):
    short_ema = pd.Series(prices).ewm(span=short, adjust=False).mean()
    long_ema = pd.Series(prices).ewm(span=long, adjust=False).mean()
    macd_line = short_ema - long_ema
    signal_line = macd_line.ewm(span=signal, adjust=False).mean()
    hist = macd_line - signal_line
    return macd_line.iloc[-1], signal_line.iloc[-1], hist.iloc[-1]

def interpret_rsi_macd(rsi, macd, signal, hist):
    trend = ""
    if rsi > 70:
        trend += "🔴 RSI: Aşırı Alım"
    elif rsi < 30:
        trend += "🟢 RSI: Aşırı Satım"
    else:
        trend += "⚪ RSI: Nötr"

    if macd > signal and hist > 0:
        trend += " | 📈 MACD: Yükseliş"
    elif macd < signal and hist < 0:
        trend += " | 📉 MACD: Düşüş"
    else:
        trend += " | ➡️ MACD: Kararsız"
    return trend

def rsi_macd_command(coins):
    msg = "📊 RSI & MACD Trend Analizi\n"
    for c in coins:
        sym = c.upper() + "USDT"
        try:
            closes = get_klines(sym)
            rsi = round(calculate_rsi(closes), 2)
            macd, signal, hist = calculate_macd(closes)
            tr = interpret_rsi_macd(rsi, macd, signal, hist)
            msg += f"\n{c.upper()}: RSI={rsi}, MACD={macd:.2f}, Signal={signal:.2f} → {tr}"
        except Exception as e:
            msg += f"\n{c.upper()}: Veri alınamadı ({e})"
    return msg
✅ Şimdi geriye sadece ap_jobs.py ve requirements.txt kaldı.
İster misin onları da tek mesajda verip paketi tamamlayayım?






Şunu dedin:
Evet


ChatGPT:
✅ Tamamdır, şimdi geriye kalan son iki dosyayı da veriyorum.
Bu dosyalarla birlikte VWAP + RSI/MACD ap_botu final sürümü tamamen tamamlanmış olacak.


✅✅
✅📂 ap_jobs.py
python
Kopyala
Düzenle
from datetime import time
from ap_utils import save_daily_history, ALERT_FILE
import json, os

def schedule_daily_jobs(job_queue):
    # Her gün saat 03:05 UTC+3 kayıt
    job_queue.run_daily(daily_record, time(hour=3, minute=5))

def daily_record(context):
    vsbtc, alt, longt = save_daily_history()
    alert = {"level1": 20, "level2": 10}

    if os.path.exists(ALERT_FILE):
        with open(ALERT_FILE, "r") as f:
            alert = json.load(f)

    msgs = []
    if vsbtc < alert['level1']:
        msgs.append(f"⚠ Altların Btc'ye Karşı Gücü: {vsbtc}")
    if alt < alert['level1']:
        msgs.append(f"⚠ Altların Gücü: {alt}")
    if longt < alert['level1']:
        msgs.append(f"⚠ Uzun Vadede Güç: {longt}")

    if vsbtc < alert['level2'] or alt < alert['level2'] or longt < alert['level2']:
        msgs.append("✅ Güçlü alım dönemi")

    if msgs:
        context.bot.send_message(chat_id=context.job.context, text="\n".join(msgs))

✅✅
✅📂 requirements.txt
ini
Kopyala
Düzenle
python-telegram-bot==13.15
requests==2.31.0
numpy==1.26.0
pandas==2.2.0
schedule==1.2.0
✅ Klasör Yapısı (Tam Son Hal)
bash
Kopyala
Düzenle
ap_botu/
├── main.py
├── keep_alive.py
├── ap_main.py
├── ap_utils.py
├── ap_jobs.py
├── requirements.txt
├── ap_favorites.json   # ilk çalıştırmada otomatik oluşur
├── ap_alerts.json      # /setalert komutuyla oluşur
└── ap_history.csv      # günlük kayıt sonrası oluşur
✅ Çalıştırma Adımları
Tüm dosyaları yukarıdaki yapı ile oluştur.

pip install -r requirements.txt ile bağımlılıkları yükle.

main.py içinde TELEGRAM_TOKEN’i ayarla.

python main.py ile başlat.

Telegram komutları:

/ap → VWAP tabanlı skor

/trend btc eth bnb → RSI & MACD trend analizi

/p btc eth → Fiyat ve hacim

/add F1 /p btc eth → Favori listeler

/setalert 20 10 → Bildirim eşiği

✅ Artık test etmeye başlayabilirsin.